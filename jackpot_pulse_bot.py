# –£–í–ê–ì–ê: –¶–µ–π —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤–Ω–∏–π –∫–æ–¥ Telegram-–±–æ—Ç–∞ Jackpot Pulse —ñ–∑ –¥–≤–æ–º–∞ –≤–∞–ª—é—Ç–∞–º–∏.

# [–£–∂–µ –≤–∫–ª—é—á–µ–Ω–æ –≤–∏—â–µ...]

# –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∞
@bot.message_handler(func=lambda m: m.text == 'üÉè –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∞')
def fart_card(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return

    now = int(time.time())
    last_card = users_data[user_id].get('last_card', 0)
    if now - last_card < 86400:
        bot.send_message(message.chat.id, "<b>‚è≥ –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫—É –º–æ–∂–Ω–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –ª–∏—à–µ —Ä–∞–∑ –Ω–∞ –¥–æ–±—É. –ó–∞—Ö–æ–¥—å –∑–∞–≤—Ç—Ä–∞!</b>", reply_markup=main_keyboard)
        return

    users_data[user_id]['last_card'] = now
    outcomes = [
        ("üí∞ <b>+50 PulseCoins!</b>", 50),
        ("üéü <b>–ö–≤–∏—Ç–æ–∫ –Ω–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à!</b>", 0),
        (f"ü§£ <i>{random.choice(jokes)}</i>", 0),
        ("ü§∑‚Äç‚ôÇÔ∏è <b>–ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–ø–∞–ª–æ —Ü—å–æ–≥–æ —Ä–∞–∑—É. –°–ø—Ä–æ–±—É–π —â–µ!</b>", 0)
    ]
    text, coins = random.choice(outcomes)
    if "–ö–≤–∏—Ç–æ–∫" in text:
        users_data[user_id]['tickets'] += 1
    if coins > 0:
        users_data[user_id]['pulse'] += coins
    save_data()
    bot.send_message(message.chat.id, f"<b>üÉè –¢–≤–æ—è —Ñ–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∞ –ø–æ–∫–∞–∑—É—î:</b>

{text}", reply_markup=main_keyboard)

# –ö–Ω–æ–ø–∫–∞ –í–∏–≤–µ—Å—Ç–∏
@bot.message_handler(func=lambda m: m.text == 'üí∏ –í–∏–≤–µ—Å—Ç–∏')
def request_withdraw(message):
    user_id = message.from_user.id
    if users_data.get(user_id, {}).get('lucky', 0) < 250:
        bot.send_message(message.chat.id, "‚ùå –ú—ñ–Ω—ñ–º—É–º –¥–ª—è –≤–∏–≤–æ–¥—É ‚Äî 250 LuckyTokens", reply_markup=main_keyboard)
        return
    bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –≤–∏–≤–æ–¥—É (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏, –±–∞–Ω–∫—É –∞–±–æ —ñ–Ω—à–µ):")
    bot.register_next_step_handler(message, process_withdraw_request)

def process_withdraw_request(message):
    user_id = message.from_user.id
    requisites = message.text.strip()
    users_data[user_id]['lucky'] -= 250
    users_data[user_id]['withdraw_request'] = {
        'amount': 250,
        'requisites': requisites,
        'status': 'pending',
        'timestamp': int(time.time())
    }
    save_data()
    bot.send_message(message.chat.id, "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞. –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ—Ç—è–≥–æ–º 48 –≥–æ–¥–∏–Ω.", reply_markup=main_keyboard)
    bot.send_message(ADMIN_ID, f"üì§ –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥ @{message.from_user.username} ({user_id}):
üí∞ –°—É–º–∞: 250 LuckyTokens
üè¶ –†–µ–∫–≤—ñ–∑–∏—Ç–∏: {requisites}")

# –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤
@bot.message_handler(func=lambda m: m.text == '‚≠êÔ∏è –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤')
def top_players(message):
    top = sorted(users_data.items(), key=lambda x: x[1].get('pulse', 0), reverse=True)[:5]
    text = "<b>üèÜ –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ PulseCoins:</b>

"
    for i, (uid, data) in enumerate(top, 1):
        username = f"@{bot.get_chat(uid).username}" if bot.get_chat(uid).username else str(uid)
        text += f"{i}. {username} ‚Äî {data['pulse']} PulseCoins
"
    bot.send_message(message.chat.id, text)

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
@bot.message_handler(func=lambda m: m.text == 'üëØ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
def invite(message):
    ref_link = f"https://t.me/JackpotPulse_bot?start={message.from_user.id}"
    bot.send_message(message.chat.id, f"<b>üë• –ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤!</b>

–¢–≤–æ—î —Ä–µ—Ñ-–ø–æ—Å–∏–ª–∞–Ω–Ω—è:
{ref_link}", reply_markup=main_keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("‚úÖ Jackpot Pulse Bot –∑–∞–ø—É—â–µ–Ω–æ...")
bot.infinity_polling()
