import telebot
import random
import time
import threading
import json
import os

TOKEN = '7102389575:AAHMc_209ElVL5Qlv7-bLhCkMIiVD9T8Obw'
bot = telebot.TeleBot(TOKEN, parse_mode='HTML')

sponsor_channels = [
    '@Vsi_PROMO',
    '@uaclub_casinoman'
]

ADMIN_ID = 7262164512
DATA_FILE = 'users_data.json'

# –ñ–∞—Ä—Ç–∏ –¥–ª—è —Ñ–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∏
jokes = [
    "–§–∞—Ä—Ç –ø–æ—Å—Ç—É–∫–∞–≤ ‚Äî –Ω–µ –ø—Ä–∏–∫–∏–¥–∞–π—Å—è, —â–æ —Ç–µ–±–µ –Ω–µ–º–∞—î –≤–¥–æ–º–∞.",
    "–ö—Ä–∞—â–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—â–∞—Å—Ç–∏—Ç–∏, –Ω—ñ–∂ —Å—Ç–æ —Ä–∞–∑—ñ–≤ –ø–æ—à–∫–æ–¥—É–≤–∞—Ç–∏.",
    "–§–∞—Ä—Ç ‚Äî —Ü–µ –∫–æ–ª–∏ –∑–∞ —Ç–µ–±–µ –≥—Ä–∞—é—Ç—å –Ω–∞–≤—ñ—Ç—å –ª—ñ—Ö—Ç–∞—Ä—ñ –Ω–∞ –≤—É–ª–∏—Ü—ñ.",
    "–Ø–∫—â–æ –Ω–µ –ø–æ—â–∞—Å—Ç–∏–ª–æ, –ø–æ—á–µ–∫–∞–π ‚Äì —Å–∫–æ—Ä–æ –ø–æ–≤–µ–∑–µ!",
]

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'r') as f:
        users_data = json.load(f)
        users_data = {int(k): v for k, v in users_data.items()}
else:
    users_data = {}

def save_data():
    with open(DATA_FILE, 'w') as f:
        json.dump({str(k): v for k, v in users_data.items()}, f, indent=4)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
main_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.row('üéÅ –©–æ–¥–µ–Ω–Ω–∏–π —Ñ–∞—Ä—Ç', 'üÉè –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∞')
main_keyboard.row('üèÜ –†–æ–∑—ñ–≥—Ä–∞—à—ñ', 'üëØ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
main_keyboard.row('üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', 'üì¢ –°–ø–æ–Ω—Å–æ—Ä–∏ / –ù–æ–≤–∏–Ω–∏')
main_keyboard.row('‚≠êÔ∏è –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤', 'üéü –ü—Ä–æ–º–æ–∫–æ–¥')
main_keyboard.row('üì£ –î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –∫–∞–Ω–∞–ª —É Jackpot Pulse')

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å—É —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
balance_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
balance_keyboard.row('üìä –ë–∞–ª–∞–Ω—Å', 'üí∏ –í–∏–≤–µ—Å—Ç–∏')

# –ü—Ä–æ–º–æ–∫–æ–¥–∏
promocodes = {
    'nt7v-wz1y-tjbz-j15a': {'value': 45, 'activations': 30},
    'u0pp-rrga-9q5g-ewv5': {'value': 35, 'activations': 30},
    'd7gg-tmgl-2mhv-3s5t': {'value': 25, 'activations': 30},
    't6cz-xuk8-nhao-ejs6': {'value': 25, 'activations': 30},
    'qpwr-ckpw-iqnk-eo47': {'value': 20, 'activations': 30},
    'q3pf-xgb6-9owd-6vjt': {'value': 15, 'activations': 30},
    'nnf1-56z3-urzx-ocq3': {'value': 20, 'activations': 30},
    '1gpw-gvvh-n8ty-g4ds': {'value': 20, 'activations': 30},
    'cxae-68zk-3cs0-lyte': {'value': 15, 'activations': 30},
    '62j1-6zsh-j5i6-s8k7': {'value': 15, 'activations': 30},
    '74c2-eu9v-in1u-rtgh': {'value': 30, 'activations': 30},
    '8ttb-r3km-m0ol-lk7k': {'value': 25, 'activations': 30},
    'dygo-l42j-d6bj-5b38': {'value': 20, 'activations': 30},
    '9gt8-2zvl-tx3v-dsei': {'value': 25, 'activations': 30},
    'bipg-jvs8-n4qj-ppkk': {'value': 20, 'activations': 30},
    'ig2j-inlo-qbzw-o78i': {'value': 25, 'activations': 30},
    'spbx-ldu7-x9om-wfmb': {'value': 25, 'activations': 30},
    '4ocs-s1ig-164x-qyvk': {'value': 25, 'activations': 30},
    'mvod-y9tk-s2xf-uul9': {'value': 15, 'activations': 30},
    'bgcj-5duz-1iev-eqdh': {'value': 15, 'activations': 30},
    '0fiz-wki6-txmt-oppv': {'value': 15, 'activations': 30},
    'y9wg-xsr7-hhmz-i0bd': {'value': 30, 'activations': 30},
    '3hu6-s0de-8ona-xq81': {'value': 30, 'activations': 30},
    'fchg-t8a5-bqno-lksz': {'value': 20, 'activations': 30},
    'ox35-9qtm-c4qq-vkv5': {'value': 20, 'activations': 30},
    '1the-1rf8-aawk-6n4y': {'value': 20, 'activations': 30},
    'xqd7-clb4-9n49-zbyn': {'value': 30, 'activations': 30},
    '0mlm-tnix-wsqa-s10y': {'value': 15, 'activations': 30},
    'nl84-0s7e-c0ad-smuj': {'value': 15, 'activations': 30},
    'c4b8-sk3y-giw1-t6bq': {'value': 25, 'activations': 30},
    'tmym-xrl3-ztdh-kps4': {'value': 15, 'activations': 30},
    'suxe-i3cz-an5l-tbyo': {'value': 30, 'activations': 30},
    'tgt3-znkg-9mnr-ht08': {'value': 15, 'activations': 30},
    '7usj-k7zt-f4un-9ghp': {'value': 25, 'activations': 30},
    'y1qd-lua7-hkqt-ql11': {'value': 30, 'activations': 30},
    'cmd7-k6cw-7a1y-o0dm': {'value': 15, 'activations': 30},
    '3ipx-yrmk-wkd3-fvyk': {'value': 30, 'activations': 30},
    'z174-k22u-soyy-cwyv': {'value': 30, 'activations': 30},
    'mu3e-<OutputTruncated>': {'value': 30, 'activations': 30},
    'isus-lx3b-vzv3-efib': {'value': 20, 'activations': 30},
    '3dkf-edm2-iyiq-1vxw': {'value': 20, 'activations': 30},
    's9g1-63ly-7oen-ftio': {'value': 25, 'activations': 30},
    'y52l-cwkz-1j64-rt47': {'value': 30, 'activations': 30},
    '93kl-2kvd-w6y5-bqmr': {'value': 30, 'activations': 30},
    '3syo-akh4-kq0m-egoc': {'value': 25, 'activations': 30},
    'r9qc-af7d-85cg-w397': {'value': 15, 'activations': 30},
    'q6fz-g4af-ywd5-jvnk': {'value': 25, 'activations': 30},
    'zz8h-7bmx-ke5y-a7k9': {'value': 15, 'activations': 30},
    'zeca-579k-l1b9-xotr': {'value': 20, 'activations': 30},
    'ejtu-ezos-i4sh-87fr': {'value': 25, 'activations': 30},
    'nt65-mglo-85gl-s72x': {'value': 30, 'activations': 30},
    'yii9-i4ck-bc4x-l5l8': {'value': 20, 'activations': 30},
    'f07a-4jvz-cmcb-yql9': {'value': 25, 'activations': 30},
    '2jw1-jv1n-a4bo-qey5': {'value': 25, 'activations': 30},
    'jifb-9rii-u5uz-9vly': {'value': 25, 'activations': 30},
    'c7jg-50wo-xrtu-3ca2': {'value': 20, 'activations': 30},
    'w6x4-5fz7-ktrt-xcd5': {'value': 15, 'activations': 30},
    '8l5a-2cxv-6388-l558': {'value': 30, 'activations': 30},
    'istt-hpw7-ycir-ccl1': {'value': 30, 'activations': 30},
    'jmln-yb5s-iv5f-d4w8': {'value': 15, 'activations': 30},
    '8kvm-fmxe-dzny-7odw': {'value': 20, 'activations': 30},
    'teuc-9hbs-m1gl-xm7w': {'value': 25, 'activations': 30},
    'h4mu-oxv1-cz2h-xssl': {'value': 25, 'activations': 30},
    'qj97-bu0x-coel-byq8': {'value': 20, 'activations': 30},
    'pijd-j2vy-chbw-as0i': {'value': 25, 'activations': 30},
    'tid5-eii7-25iy-ez7e': {'value': 25, 'activations': 30},
    'wp6i-i28p-04ms-iyi6': {'value': 15, 'activations': 30},
    '1ouy-qm11-rn38-0sac': {'value': 30, 'activations': 30},
    'li2c-dt2d-z14m-9t4g': {'value': 30, 'activations': 30},
    '36p9-6dcg-ang4-5skc': {'value': 15, 'activations': 30},
    'kfzn-wm3q-wdan-yzoe': {'value': 20, 'activations': 30},
    'pmag-pk04-y0nh-qsms': {'value': 15, 'activations': 30},
    'n4xr-7pyj-4bxi-ofbt': {'value': 30, 'activations': 30},
    'c7gk-gajj-orq6-8w2j': {'value': 20, 'activations': 30}
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—Ä–æ–º–æ–∫–æ–¥—É
@bot.message_handler(func=lambda message: message.text.startswith('üéü –ü—Ä–æ–º–æ–∫–æ–¥'))
def promo_code(message):
    markup = telebot.types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=markup)
    bot.register_next_step_handler(message, process_promo_code)

def process_promo_code(message):
    user_id = message.from_user.id
    promo_code = message.text.strip()

    if promo_code in promocodes and promocodes[promo_code]["activations"] > 0:
        promocodes[promo_code]["activations"] -= 1
        users_data[user_id]['balance'] += promocodes[promo_code]["value"]
        save_data()
        bot.send_message(message.chat.id, f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {promocodes[promo_code]['value']} LuckyTokens. –ó–∞–ª–∏—à–∏–ª–æ—Å—è –∞–∫—Ç–∏–≤–∞—Ü—ñ–π: {promocodes[promo_code]['activations']}", reply_markup=main_keyboard)
    else:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ.", reply_markup=main_keyboard)

# –ö–Ω–æ–ø–∫–∞ –±–∞–ª–∞–Ω—Å—É
@bot.message_handler(func=lambda m: m.text == 'üìä –ë–∞–ª–∞–Ω—Å')
def show_balance(message):
    user_id = message.from_user.id
    balance = users_data.get(user_id, {}).get('balance', 0)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è, —è–∫—â–æ –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–Ω—ñ–π
    if balance >= 250:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('üí∏ –í–∏–≤–µ—Å—Ç–∏')
        bot.send_message(message.chat.id, f"ü™ô –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} LuckyTokens", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f"ü™ô –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} LuckyTokens
–î–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 250 LuckyTokens.", reply_markup=main_keyboard)

# –ö–Ω–æ–ø–∫–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
@bot.message_handler(func=lambda m: m.text == 'üí∏ –í–∏–≤–µ—Å—Ç–∏')
def withdraw(message):
    user_id = message.from_user.id
    balance = users_data.get(user_id, {}).get('balance', 0)

    if balance >= 250:
        # –õ–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
        users_data[user_id]['withdraw_request'] = {
            'amount': 250,
            'status': 'pending',  # –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ "–æ—á—ñ–∫—É—î"
            'timestamp': int(time.time())
        }
        save_data()
        # –°–ø–æ–≤—ñ—â–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.send_message(ADMIN_ID, f"üì© –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.first_name} (@{message.from_user.username}): {250} LuckyTokens. –ß–∞—Å: {time.ctime()}")
        bot.send_message(message.chat.id, "üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–∞. –ó–∞—è–≤–∫–∞ –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∞ –ø—Ä–æ—Ç—è–≥–æ–º 48 –≥–æ–¥–∏–Ω.", reply_markup=main_keyboard)
    else:
        bot.send_message(message.chat.id, "‚ùå –î–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 250 LuckyTokens.", reply_markup=main_keyboard)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –ø—ñ—Å–ª—è 48 –≥–æ–¥–∏–Ω
def check_withdrawals():
    while True:
        print("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è...")
        current_time = int(time.time())
        for user_id, data in users_data.items():
            withdraw_request = data.get('withdraw_request', {})
            if withdraw_request and withdraw_request['status'] == 'pending':
                # –Ø–∫—â–æ –∑ –º–æ–º–µ–Ω—Ç—É –∑–∞—è–≤–∫–∏ –ø—Ä–æ–π—à–ª–æ –±—ñ–ª—å—à–µ 48 –≥–æ–¥–∏–Ω
                if current_time - withdraw_request['timestamp'] >= 48 * 3600:
                    # –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–∑–≥–ª—è–Ω—É—Ç—É
                    users_data[user_id]['withdraw_request']['status'] = 'processed'
                    save_data()
                    bot.send_message(user_id, "‚ùóÔ∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –±—É–ª–∞ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∞ —ñ –≤–∏–∫–æ–Ω–∞–Ω–∞!", reply_markup=main_keyboard)
                    # –°–ø–æ–≤—ñ—â–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    bot.send_message(ADMIN_ID, f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥ {user_id} –±—É–ª–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞.")
        time.sleep(3600)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —â–æ–≥–æ–¥–∏–Ω–∏

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
threading.Thread(target=check_withdrawals, daemon=True).start()
# –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
welcome_text = """<b>üé∞ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ Jackpot Pulse!</b>

<b>‚úÖ –©–æ —Ç—É—Ç –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è:</b>
‚Ä¢ üéÅ –©–æ–¥–Ω—è –∑–∞—Ö–æ–¥–∏—à ‚Üí –æ—Ç—Ä–∏–º—É—î—à –±–æ–Ω—É—Å PulseCoins (15‚Äì100)
‚Ä¢ üÉè –í—ñ–¥–∫—Ä–∏–≤–∞—î—à –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∏ ‚Üí –ª–æ–≤–∏—à –ø—Ä–∏–∑–∏
‚Ä¢ üëØ –ó–∞–ø—Ä–æ—à—É—î—à –¥—Ä—É–∑—ñ–≤ ‚Üí —â–µ –±—ñ–ª—å—à–µ PulseCoins
‚Ä¢ üèÜ –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö —Ä–µ–∞–ª—å–Ω–∏—Ö –≥—Ä–æ—à–µ–π

<b>‚ö†Ô∏è –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –Ω–∞ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏.</b>
<i>‚ö†Ô∏è –Ø–∫—â–æ –≤—ñ–¥–ø–∏—Å—É—î—à—Å—è –≤—ñ–¥ –±—É–¥—å-—è–∫–æ–≥–æ –∫–∞–Ω–∞–ª—É ‚Äî –≤—Å—ñ –±–æ–Ω—É—Å–∏ —Ç–∞ —É—á–∞—Å—Ç—å –∞–Ω—É–ª—é—é—Ç—å—Å—è!</i>
<b>üî• –ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ —Å–≤—ñ–π —à–ª—è—Ö –¥–æ –¥–∂–µ–∫–ø–æ—Ç—É!</b>"""

def get_channels_buttons():
    markup = telebot.types.InlineKeyboardMarkup()
    for ch in sponsor_channels:
        markup.add(telebot.types.InlineKeyboardButton(text=ch, url=f"https://t.me/{ch.strip('@')}"))
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏
    markup.add(telebot.types.InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check_subs"))
    return markup

def check_subscriptions(user_id):
    try:
        for channel in sponsor_channels:
            member = bot.get_chat_member(channel, user_id)
            if member.status in ['left', 'kicked']:
                return False
        return True
    except Exception as e:
        print("Subscription check error:", e)
        return False

def reset_user(user_id):
    users_data[user_id] = {
        'balance': 0,
        'last_bonus': 0,
        'last_card': 0,
        'streak': 0,
        'referrals': 0,
        'tickets': 0,
        'last_active': int(time.time()),
        'referral_from': None,
        'lottery_participation': False
    }
    save_data()

@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = message.from_user.id
    ref_id = None

    if message.text:
        args = message.text.split()
        if len(args) > 1:
            try:
                ref_id = int(args[1])
            except:
                pass
        else:
            if len(message.text) > 6:
                try:
                    ref_id = int(message.text[6:])
                except:
                    pass

    if user_id not in users_data:
        users_data[user_id] = {
            'balance': 0,
            'last_bonus': 0,
            'last_card': 0,
            'streak': 0,
            'referrals': 0,
            'tickets': 0,
            'last_active': int(time.time()),
            'referral_from': None,
            'lottery_participation': False
        }
        if ref_id and ref_id != user_id:
            users_data[user_id]['referral_from'] = ref_id
            if ref_id in users_data:
                users_data[ref_id]['referrals'] += 1
                try:
                    bot.send_message(ref_id, f"<b>üéâ –£ —Ç–µ–±–µ –Ω–æ–≤–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª: {message.from_user.first_name} (@{message.from_user.username})</b>")
                except:
                    pass
    else:
        users_data[user_id]['last_active'] = int(time.time())

    save_data()
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_keyboard)
    bot.send_message(message.chat.id, "<b>üîó –ù–∞—à—ñ –∫–∞–Ω–∞–ª–∏ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏:</b>", reply_markup=get_channels_buttons())

@bot.callback_query_handler(func=lambda call: call.data == "check_subs")
def callback_check_subs(call):
    user_id = call.from_user.id
    if check_subscriptions(user_id):
        bot.answer_callback_query(call.id, "‚úÖ –í—Å—ñ –∫–∞–Ω–∞–ª–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ!")
    else:
        reset_user(user_id)
        bot.answer_callback_query(call.id, "‚ùå –¢–∏ –≤—ñ–¥–ø–∏—Å–∞–≤—Å—è –≤—ñ–¥ –æ–¥–Ω–æ–≥–æ –∑ –∫–∞–Ω–∞–ª—ñ–≤. –¢–≤–æ—ó –±–æ–Ω—É—Å–∏ –∞–Ω—É–ª—å–æ–≤–∞–Ω—ñ!")
        bot.send_message(user_id, "<b>‚ùóÔ∏è –¢–∏ –≤—ñ–¥–ø–∏—Å–∞–≤—Å—è –≤—ñ–¥ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤.\n–£—Å—ñ –±–æ–Ω—É—Å–∏ —Å–∫–∏–Ω—É—Ç–æ. –ü—ñ–¥–ø–∏—à–∏—Å—å –∑–Ω–æ–≤—É, —â–æ–± –≥—Ä–∞—Ç–∏!</b>")

@bot.message_handler(func=lambda m: m.text == 'üéÅ –©–æ–¥–µ–Ω–Ω–∏–π —Ñ–∞—Ä—Ç')
def daily_bonus(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>–°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return

    now = int(time.time())
    last = users_data[user_id]['last_bonus']
    users_data[user_id]['last_active'] = now

    if now - last < 86400:
        bot.send_message(message.chat.id, "<b>üïê –¢–∏ –≤–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ –æ—Ç—Ä–∏–º–∞–≤ —Ñ–∞—Ä—Ç! –ó–∞–≤—ñ—Ç–∞–π –∑–∞–≤—Ç—Ä–∞ üòâ</b>", reply_markup=main_keyboard)
    else:
        bonus = random.randint(15, 100)
        users_data[user_id]['balance'] += bonus
        users_data[user_id]['last_bonus'] = now
        users_data[user_id]['streak'] += 1
        save_data()
        bot.send_message(message.chat.id, f"<b>üéâ –ü–ª—é—Å —É–¥–∞—á—ñ {bonus} —Ñ–∞—Ä—Ç—ñ–≤! üéâ</b>\n\n", reply_markup=main_keyboard)
        bot.send_message(message.chat.id,
            f"<b>üîÆ –ü—É–ª—å—Å —É–¥–∞—á—ñ –±‚Äô—î—Ç—å—Å—è —Ä—ñ–≤–Ω–æ üëä</b>\n\n"
            f"<b>+{bonus} PulseCoins üí∏</b>\n"
            f"<b>üî• –°—Ç—Ä—ñ–∫:</b> {users_data[user_id]['streak']} –¥–Ω—ñ(–≤)",
            reply_markup=main_keyboard)

@bot.message_handler(func=lambda m: m.text == 'üÉè –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∞')
def fart_card(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return

    now = int(time.time())
    last_card = users_data[user_id].get('last_card', 0)
    if now - last_card < 86400:
        bot.send_message(message.chat.id, "<b>‚è≥ –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫—É –º–æ–∂–Ω–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –ª–∏—à–µ —Ä–∞–∑ –Ω–∞ –¥–æ–±—É. –ó–∞—Ö–æ–¥—å –∑–∞–≤—Ç—Ä–∞!</b>", reply_markup=main_keyboard)
        return

    users_data[user_id]['last_card'] = now
    users_data[user_id]['last_active'] = now

    outcomes = [
        ("üí∞ <b>+50 PulseCoins!</b>", 50),
        ("üéü <b>–ö–≤–∏—Ç–æ–∫ –Ω–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à!</b>", 0),
        (f"ü§£ <i>{random.choice(jokes)}</i>", 0),
        ("ü§∑‚Äç‚ôÇÔ∏è <b>–ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–ø–∞–ª–æ —Ü—å–æ–≥–æ —Ä–∞–∑—É. –°–ø—Ä–æ–±—É–π —â–µ!</b>", 0)
    ]
    text, coins = random.choice(outcomes)
    if "–ö–≤–∏—Ç–æ–∫" in text:
        users_data[user_id]['tickets'] += 1
    if coins > 0:
        users_data[user_id]['balance'] += coins
    save_data()
    bot.send_message(message.chat.id, f"<b>üÉè –¢–≤–æ—è —Ñ–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∞ –ø–æ–∫–∞–∑—É—î:</b>\n\n{text}", reply_markup=main_keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì¢ –°–ø–æ–Ω—Å–æ—Ä–∏ / –ù–æ–≤–∏–Ω–∏"
@bot.message_handler(func=lambda m: m.text == 'üì¢ –°–ø–æ–Ω—Å–æ—Ä–∏ / –ù–æ–≤–∏–Ω–∏')
def sponsors_news(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.</b>", reply_markup=main_keyboard)
        return

    text = "<b>üì¢ –ù–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏ —Ç–∞ –Ω–æ–≤–∏–Ω–∏:</b>"
    markup = telebot.types.InlineKeyboardMarkup()
    for ch in sponsor_channels:
        markup.add(telebot.types.InlineKeyboardButton(text=ch, url=f"https://t.me/{ch.strip('@')}"))
    markup.add(telebot.types.InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))
    bot.send_message(message.chat.id, text, reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ callback –∫–Ω–æ–ø–∫–∏ "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É"
@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription_callback(call):
    user_id = call.from_user.id
    if check_subscriptions(user_id):
        bot.answer_callback_query(call.id, "‚úÖ –¢–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏! –ü—Ä–æ–¥–æ–≤–∂—É–π —É —Ç–æ–º—É –∂ –¥—É—Å—ñ ü•≥")
    else:
        bot.answer_callback_query(call.id, "‚ùå –¢–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏. –ü—ñ–¥–ø–∏—à–∏—Å—å, –±—É–¥—å –ª–∞—Å–∫–∞!")

@bot.message_handler(func=lambda m: m.text == 'üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å')
def my_profile(message):
    user_id = message.from_user.id
    data = users_data.get(user_id)
    if data:
        users_data[user_id]['last_active'] = int(time.time())
        save_data()
        bot.send_message(message.chat.id,
            f"<b>üìä –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å:</b>\n\n"
            f"ü™ô PulseCoins: {data['balance']}\n"
            f"üìÜ –°—Ç—Ä—ñ–∫: {data['streak']} –¥–Ω—ñ(–≤)\n"
            f"üë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤: {data['referrals']}\n"
            f"üéü –ö–≤–∏—Ç–∫—ñ–≤ –Ω–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à: {data['tickets']}",
            reply_markup=main_keyboard)
    else:
        bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å —â–µ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù–∞—Ç–∏—Å–Ω–∏ /start</b>", reply_markup=main_keyboard)

@bot.message_handler(func=lambda m: m.text == '‚≠êÔ∏è –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤')
def show_top5(message):
    if not users_data:
        bot.send_message(message.chat.id, "<b>‚ùå –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤.</b>")
        return
    top5 = sorted(users_data.items(), key=lambda x: x[1].get('balance', 0), reverse=True)[:5]

    text = "<b>üèÜ –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ PulseCoins:</b>\n\n"
    for i, (user_id, data) in enumerate(top5, start=1):
        try:
            user = bot.get_chat(user_id)
            username = f"@{user.username}" if user.username else str(user_id)
        except:
            username = str(user_id)
        text += f"{i}. {username} ‚Äî <b>{data.get('balance',0)}</b> PulseCoins\n"

    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda m: m.text == 'üëØ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
def invite_friend(message):
    user_id = message.from_user.id
    ref_link = f"https://t.me/JackpotPulse_bot?start={user_id}"
    bot.send_message(message.chat.id,
        f"<b>üëØ –ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤!</b>\n\n"
        f"üîó –¢–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {ref_link}\n"
        f"‚úÖ –ó–∞ –∫–æ–∂–Ω–æ–≥–æ ‚Äî +20 PulseCoins\nüéØ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å 3 –¥–Ω—ñ ‚Äî —â–µ +10",
        reply_markup=main_keyboard)

@bot.message_handler(func=lambda m: m.text == 'üèÜ –†–æ–∑—ñ–≥—Ä–∞—à—ñ')
def lottery(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return
    tickets = users_data.get(user_id, {}).get('tickets', 0)
    info = (
        "<b>üèÜ Jackpot Pulse ‚Äî –†–æ–∑—ñ–≥—Ä–∞—à—ñ</b>\n\n"
        "üéÅ –ü—Ä–∏–∑: 500 –≥—Ä–Ω - (5 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –ø–æ 100 –≥—Ä–Ω)\nüìÜ –©–æ–≤—ñ–≤—Ç–æ—Ä–∫–∞ –æ 19:00\n\n"
        "üî∏ –Ø–∫ –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å:\n‚Ä¢ 1000 PulseCoins\n‚Ä¢ –∞–±–æ 25 –¥—Ä—É–∑—ñ–≤\n‚Ä¢ –∞–±–æ <b>15 –∫–≤–∏—Ç–∫—ñ–≤</b> üéü\n\n"
        f"üéü –£ —Ç–µ–±–µ: {tickets} –∫–≤–∏—Ç–∫—ñ–≤\n\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å!"
    )
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å", callback_data="join_lottery"))
    bot.send_message(message.chat.id, info, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "join_lottery")
def handle_join_lottery(call):
    user_id = call.from_user.id
    user = users_data.get(user_id)
    if not user:
        bot.answer_callback_query(call.id, "‚ùóÔ∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω–∏ /start")
        return

    if user['tickets'] >= 15:
        user['tickets'] -= 15
        method = "–∫–≤–∏—Ç–∫–∏"
    elif user['balance'] >= 1000:
        user['balance'] -= 1000
        method = "PulseCoins"
    elif user['referrals'] >= 25:
        user['referrals'] -= 25
        method = "–¥—Ä—É–∑—ñ"
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É–º–æ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ!")
        return# –û–±—Ä–æ–±–Ω–∏–∫ callback –∫–Ω–æ–ø–∫–∏ "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É"
@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription_callback(call):
    user_id = call.from_user.id
    if check_subscriptions(user_id):
        bot.answer_callback_query(call.id, "‚úÖ –¢–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏! –ü—Ä–æ–¥–æ–≤–∂—É–π —É —Ç–æ–º—É –∂ –¥—É—Å—ñ ü•≥")
    else:
        bot.answer_callback_query(call.id, "‚ùå –¢–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏. –ü—ñ–¥–ø–∏—à–∏—Å—å, –±—É–¥—å –ª–∞—Å–∫–∞!")

@bot.message_handler(func=lambda m: m.text == 'üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å')
def my_profile(message):
    user_id = message.from_user.id
    data = users_data.get(user_id)
    if data:
        users_data[user_id]['last_active'] = int(time.time())
        save_data()
        bot.send_message(message.chat.id,
            f"<b>üìä –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å:</b>\n\n"
            f"ü™ô PulseCoins: {data['balance']}\n"
            f"üìÜ –°—Ç—Ä—ñ–∫: {data['streak']} –¥–Ω—ñ(–≤)\n"
            f"üë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤: {data['referrals']}\n"
            f"üéü –ö–≤–∏—Ç–∫—ñ–≤ –Ω–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à: {data['tickets']}",
            reply_markup=main_keyboard)
    else:
        bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å —â–µ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù–∞—Ç–∏—Å–Ω–∏ /start</b>", reply_markup=main_keyboard)

@bot.message_handler(func=lambda m: m.text == '‚≠êÔ∏è –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤')
def show_top5(message):
    if not users_data:
        bot.send_message(message.chat.id, "<b>‚ùå –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤.</b>")
        return
    top5 = sorted(users_data.items(), key=lambda x: x[1].get('balance', 0), reverse=True)[:5]

    text = "<b>üèÜ –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ PulseCoins:</b>\n\n"
    for i, (user_id, data) in enumerate(top5, start=1):
        try:
            user = bot.get_chat(user_id)
            username = f"@{user.username}" if user.username else str(user_id)
        except:
            username = str(user_id)
        text += f"{i}. {username} ‚Äî <b>{data.get('balance',0)}</b> PulseCoins\n"

    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda m: m.text == 'üëØ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
def invite_friend(message):
    user_id = message.from_user.id
    ref_link = f"https://t.me/JackpotPulse_bot?start={user_id}"
    bot.send_message(message.chat.id,
        f"<b>üëØ –ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤!</b>\n\n"
        f"üîó –¢–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {ref_link}\n"
        f"‚úÖ –ó–∞ –∫–æ–∂–Ω–æ–≥–æ ‚Äî +20 PulseCoins\nüéØ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å 3 –¥–Ω—ñ ‚Äî —â–µ +10",
        reply_markup=main_keyboard)

@bot.message_handler(func=lambda m: m.text == 'üèÜ –†–æ–∑—ñ–≥—Ä–∞—à—ñ')
def lottery(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return
    tickets = users_data.get(user_id, {}).get('tickets', 0)
    info = (
        "<b>üèÜ Jackpot Pulse ‚Äî –†–æ–∑—ñ–≥—Ä–∞—à—ñ</b>\n\n"
        "üéÅ –ü—Ä–∏–∑: 500 –≥—Ä–Ω - (5 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –ø–æ 100 –≥—Ä–Ω)\nüìÜ –©–æ–≤—ñ–≤—Ç–æ—Ä–∫–∞ –æ 19:00\n\n"
        "üî∏ –Ø–∫ –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å:\n‚Ä¢ 1000 PulseCoins\n‚Ä¢ –∞–±–æ 25 –¥—Ä—É–∑—ñ–≤\n‚Ä¢ –∞–±–æ <b>15 –∫–≤–∏—Ç–∫—ñ–≤</b> üéü\n\n"
        f"üéü –£ —Ç–µ–±–µ: {tickets} –∫–≤–∏—Ç–∫—ñ–≤\n\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å!"
    )
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å", callback_data="join_lottery"))
    bot.send_message(message.chat.id, info, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "join_lottery")
def handle_join_lottery(call):
    user_id = call.from_user.id
    user = users_data.get(user_id)
    if not user:
        bot.answer_callback_query(call.id, "‚ùóÔ∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω–∏ /start")
        return

    if user['tickets'] >= 15:
        user['tickets'] -= 15
        method = "–∫–≤–∏—Ç–∫–∏"
    elif user['balance'] >= 1000:
        user['balance'] -= 1000
        method = "PulseCoins"
    elif user['referrals'] >= 25:
        user['referrals'] -= 25
        method = "–¥—Ä—É–∑—ñ"
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É–º–æ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ!")
        return# –û–±—Ä–æ–±–Ω–∏–∫ callback –∫–Ω–æ–ø–∫–∏ "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É"
@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription_callback(call):
    user_id = call.from_user.id
    if check_subscriptions(user_id):
        bot.answer_callback_query(call.id, "‚úÖ –¢–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏! –ü—Ä–æ–¥–æ–≤–∂—É–π —É —Ç–æ–º—É –∂ –¥—É—Å—ñ ü•≥")
    else:
        bot.answer_callback_query(call.id, "‚ùå –¢–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏. –ü—ñ–¥–ø–∏—à–∏—Å—å, –±—É–¥—å –ª–∞—Å–∫–∞!")

@bot.message_handler(func=lambda m: m.text == 'üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å')
def my_profile(message):
    user_id = message.from_user.id
    data = users_data.get(user_id)
    if data:
        users_data[user_id]['last_active'] = int(time.time())
        save_data()
        bot.send_message(message.chat.id,
            f"<b>üìä –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å:</b>\n\n"
            f"ü™ô PulseCoins: {data['balance']}\n"
            f"üìÜ –°—Ç—Ä—ñ–∫: {data['streak']} –¥–Ω—ñ(–≤)\n"
            f"üë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤: {data['referrals']}\n"
            f"üéü –ö–≤–∏—Ç–∫—ñ–≤ –Ω–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à: {data['tickets']}",
            reply_markup=main_keyboard)
    else:
        bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å —â–µ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù–∞—Ç–∏—Å–Ω–∏ /start</b>", reply_markup=main_keyboard)

@bot.message_handler(func=lambda m: m.text == '‚≠êÔ∏è –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤')
def show_top5(message):
    if not users_data:
        bot.send_message(message.chat.id, "<b>‚ùå –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤.</b>")
        return
    top5 = sorted(users_data.items(), key=lambda x: x[1].get('balance', 0), reverse=True)[:5]

    text = "<b>üèÜ –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ PulseCoins:</b>\n\n"
    for i, (user_id, data) in enumerate(top5, start=1):
        try:
            user = bot.get_chat(user_id)
            username = f"@{user.username}" if user.username else str(user_id)
        except:
            username = str(user_id)
        text += f"{i}. {username} ‚Äî <b>{data.get('balance',0)}</b> PulseCoins\n"

    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda m: m.text == 'üëØ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
def invite_friend(message):
    user_id = message.from_user.id
    ref_link = f"https://t.me/JackpotPulse_bot?start={user_id}"
    bot.send_message(message.chat.id,
        f"<b>üëØ –ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤!</b>\n\n"
        f"üîó –¢–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {ref_link}\n"
        f"‚úÖ –ó–∞ –∫–æ–∂–Ω–æ–≥–æ ‚Äî +20 PulseCoins\nüéØ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å 3 –¥–Ω—ñ ‚Äî —â–µ +10",
        reply_markup=main_keyboard)

@bot.message_handler(func=lambda m: m.text == 'üèÜ –†–æ–∑—ñ–≥—Ä–∞—à—ñ')
def lottery(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return
    tickets = users_data.get(user_id, {}).get('tickets', 0)
    info = (
        "<b>üèÜ Jackpot Pulse ‚Äî –†–æ–∑—ñ–≥—Ä–∞—à—ñ</b>\n\n"
        "üéÅ –ü—Ä–∏–∑: 500 –≥—Ä–Ω - (5 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –ø–æ 100 –≥—Ä–Ω)\nüìÜ –©–æ–≤—ñ–≤—Ç–æ—Ä–∫–∞ –æ 19:00\n\n"
        "üî∏ –Ø–∫ –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å:\n‚Ä¢ 1000 PulseCoins\n‚Ä¢ –∞–±–æ 25 –¥—Ä—É–∑—ñ–≤\n‚Ä¢ –∞–±–æ <b>15 –∫–≤–∏—Ç–∫—ñ–≤</b> üéü\n\n"
        f"üéü –£ —Ç–µ–±–µ: {tickets} –∫–≤–∏—Ç–∫—ñ–≤\n\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å!"
    )
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å", callback_data="join_lottery"))
    bot.send_message(message.chat.id, info, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "join_lottery")
def handle_join_lottery(call):
    user_id = call.from_user.id
    user = users_data.get(user_id)
    if not user:
        bot.answer_callback_query(call.id, "‚ùóÔ∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω–∏ /start")
        return

    if user['tickets'] >= 15:
        user['tickets'] -= 15
        method = "–∫–≤–∏—Ç–∫–∏"
    elif user['balance'] >= 1000:
        user['balance'] -= 1000
        method = "PulseCoins"
    elif user['referrals'] >= 25:
        user['referrals'] -= 25
        method = "–¥—Ä—É–∑—ñ"
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É–º–æ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ!")
        return

@bot.callback_query_handler(func=lambda call: call.data == "join_lottery")
def handle_join_lottery(call):
    user_id = call.from_user.id  # –æ—Ç—Ä–∏–º—É—î–º–æ user_id
    if user_id not in users_data:
        # —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –Ω–µ–º–∞—î
        users_data[user_id] = {
            'balance': 0,
            'last_bonus': 0,
            'last_card': 0,
            'streak': 0,
            'referrals': 0,
            'tickets': 0,
            'last_active': int(time.time()),
            'referral_from': None,
            'lottery_participation': False
        }
    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–µ
    users_data[user_id]['lottery_participation'] = True
    save_data()  # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

    bot.answer_callback_query(call.id, "‚úÖ –¢–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É!")

try:
        user_info = bot.get_chat(user_id)
        uname = f"@{user_info.username}" if user_info.username else user_info.first_name
        bot.send_message(ADMIN_ID, f"üéü –ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—É: <b>{uname}</b>, —á–µ—Ä–µ–∑ {method}")
except:
        pass

@bot.message_handler(commands=['runlottery'])
def run_lottery(message):
    if message.from_user.id != ADMIN_ID:
        return

    participants = {uid: data for uid, data in users_data.items() if data.get('lottery_participation', False)}
    if not participants:
        bot.send_message(message.chat.id, "<b>‚ùå –ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É.</b>")
        return

    user_ids = list(participants.keys())
    random.shuffle(user_ids)
    winners = user_ids[:5]

    result = "<b>üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É:</b>\n\n"

    for idx, uid in enumerate(winners, start=1):
        try:
            user_info = bot.get_chat(uid)
            uname = f"@{user_info.username}" if user_info.username else f"<code>{uid}</code>"
            result += f"{idx}. {uname}\n"
            # –ó–Ω—ñ–º–∞—î–º–æ –±–æ–Ω—É—Å–∏ —É—á–∞—Å–Ω–∏–∫–∞
            if users_data[uid]['tickets'] >= 5:
                users_data[uid]['tickets'] -= 5
            elif users_data[uid]['balance'] >= 500:
                users_data[uid]['balance'] -= 500
            elif users_data[uid]['referrals'] >= 15:
                users_data[uid]['referrals'] -= 25
            users_data[uid]['lottery_participation'] = False
            save_data()
        except Exception as e:
            result += f"{idx}. ‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {uid} (–ø–æ–º–∏–ª–∫–∞: {e})\n"

    bot.send_message(message.chat.id, result)

@bot.message_handler(commands=['top'])
def top_rating(message):
    sorted_users = sorted(users_data.items(), key=lambda x: x[1]['balance'], reverse=True)
    top_5 = sorted_users[:5]
    text = "<b>üî• –¢–æ–ø 5 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ PulseCoins:</b>\n\n"
    for i, (uid, data) in enumerate(top_5, start=1):
        try:
            user_info = bot.get_chat(uid)
            uname = f"@{user_info.username}" if user_info.username else user_info.first_name
        except:
            uname = str(uid)
        text += f"{i}. {uname} ‚Äî <b>{data['balance']}</b>\n"
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda m: m.text == 'üì£ –î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –∫–∞–Ω–∞–ª —É Jackpot Pulse')
def add_channel_request(message):
    bot.send_message(
        message.chat.id,
        "<b>üì£ –•–æ—á–µ—à –¥–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –∫–∞–Ω–∞–ª —É Jackpot Pulse?</b>\n\n"
        "–ó–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –Ω–∞—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤:\n"
        "üë§ @vsi_promo_admin\n"
        "üë§ @oleksandra_managerr\n\n"
        "–í–æ–Ω–∏ –¥–æ–ø–æ–º–æ–∂—É—Ç—å —Ç–æ–±—ñ –∑ —Ä–µ–∫–ª–∞–º–æ—é —Ç–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü–µ—é!",
        reply_markup=main_keyboard
    )

# –ê–¥–º—ñ–Ω—Å—å–∫–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø—Ä–æ–º–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
@bot.message_handler(commands=['send_promo'])
def send_promo_to_all(message):
    if message.from_user.id != ADMIN_ID:
        return

    promo_text = (
        "<b>üì£ –£–í–ê–ì–ê –í–°–Ü–ú –í–õ–ê–°–ù–ò–ö–ê–ú –ö–ê–ù–ê–õ–Ü–í!</b>\n\n"
        "‚≠êÔ∏è <b>–•–æ—á–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ —Å–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–æ –≤ Jackpot Pulse?</b> ‚≠êÔ∏è\n\n"
        "üéØ –ü—Ä–∏–≤–µ–¥–∏ –Ω–∞–π–±—ñ–ª—å—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ ‚Äî —ñ —Ç–≤—ñ–π –∫–∞–Ω–∞–ª –ë–ï–ó–ö–û–®–¢–û–í–ù–û –æ—Ç—Ä–∏–º–∞—î —Ä–µ–∫–ª–∞–º—É –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ –Ω–∞ 1 –¥–µ–Ω—å! üöÄ\n\n"
        "üî• <i>–¶–µ —á—É–¥–æ–≤–∏–π —à–∞–Ω—Å –∑–±—ñ–ª—å—à–∏—Ç–∏ —Å–≤–æ—é –∞—É–¥–∏—Ç–æ—Ä—ñ—é —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—Ä—É—Ç–∏–π –±–æ–Ω—É—Å!</i>\n\n"
        "üë• –ß–∏–º –±—ñ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ —Ç–∏ –ø—Ä–∏–≤–µ–¥–µ—à ‚Äî —Ç–∏–º –±—ñ–ª—å—à–∞ —Ç–≤–æ—è –ø–µ—Ä–µ–º–æ–≥–∞!\n\n"
        "üì© –ü–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –¥–ª—è —É—á–∞—Å—Ç—ñ:\n"
        "üë§ @vsi_promo_admin\n"
        "üë§ @oleksandra_managerr\n\n"
        "–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏! üéâ"
    )

    count = 0
    for user_id in users_data.keys():
        try:
            bot.send_message(user_id, promo_text)
            count += 1
            time.sleep(0.1)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è {user_id}: {e}")

    bot.send_message(message.chat.id, f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–æ–∫ (–º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ä–∞–∑ –Ω–∞ –≥–æ–¥–∏–Ω—É/–¥–µ–Ω—å)
def auto_check_subscriptions():
    while True:
        print("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
        for user_id in list(users_data.keys()):
            if not check_subscriptions(user_id):
                reset_user(user_id)
                try:
                    bot.send_message(user_id, "<b>‚ùóÔ∏è –¢–∏ –≤—ñ–¥–ø–∏—Å–∞–≤—Å—è –≤—ñ–¥ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤, –≤—Å—ñ –±–æ–Ω—É—Å–∏ –∞–Ω—É–ª—å–æ–≤–∞–Ω–æ. –ü—ñ–¥–ø–∏—à–∏—Å—å –∑–Ω–æ–≤—É, —â–æ–± –≥—Ä–∞—Ç–∏!</b>")
                except:
                    pass
        time.sleep(3600)  # –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —â–æ–≥–æ–¥–∏–Ω–∏

# –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–æ–∫
threading.Thread(target=auto_check_subscriptions, daemon=True).start()

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
bot.infinity_polling()
